// Fraction
class Fraction {
    field int numerator, denominator;

    constructor Fraction new(int a, int b) {
        let numerator = a;
        let denominator = b;

        do reduce();
        return this;
    }

    // 分数を約分する
    method void reduce() {
        var int g;
        let g = Fraction.gcd(numerator, denominator);
        if (g > 1) {
            let numerator = numerator / g;
            let denominator = denominator / g;
        }
        return;
    }

    // aとbの最大公約数を求める
    function int gcd(int a, int b) {
        var int r;
        while (~(b = 0)) {
            let r = a - (b * (a / b));
            let a = b;
            let b = r;
        }
        return a;
    }

    // アクセッサ
    method int getNumerator() {
        return numerator;
    }
    
    method int getDenominator() {
        return denominator;
    }

    // この分数と他の分数の和を返す
    method Fraction plus(Fraction other) {
        var int sum;
        let sum = (numerator * other.getDenominator()) + (other.getNumerator() * denominator);

        return Fraction.new(sum, denominator * other.getDenominator());
    }

    // print...
    method void print() {
        do Output.printInt(numerator);
        do Output.printString("/");
        do Output.printInt(denominator);
        return;
    }

}
