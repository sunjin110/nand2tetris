<class>
	<keyword> class </keyword>
	<identifier> SquareGame </identifier>
	<symbol> { </symbol>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> Square </keyword>
		<identifier> square </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field </keyword>
		<keyword> int </keyword>
		<identifier> direction </identifier>
		<symbol> ; </symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor </keyword>
		<keyword> SquareGame </keyword>
		<identifier> new </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> square </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> square </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
				<letStatement>
					<keyword> let </keyword>
					<identifier> direction </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> direction </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> dispose </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> moveSquare </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<statements>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method </keyword>
		<keyword> void </keyword>
		<identifier> run </identifier>
		<symbol> ( </symbol>
		<parameterList>
		</parameterList>
		<symbol> ) </symbol>
		<subroutineBody>
			<symbol> { </symbol>
			<varDec>
				<keyword> var </keyword>
				<keyword> char </keyword>
				<identifier> key </identifier>
				<symbol> ; </symbol>
			</varDec>
			<varDec>
				<keyword> var </keyword>
				<keyword> boolean </keyword>
				<identifier> exit </identifier>
				<symbol> ; </symbol>
			</varDec>
			<statements>
				<letStatement>
					<keyword> let </keyword>
					<identifier> exit </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> key </identifier>
						</term>
					</expression>
					<symbol> ; </symbol>
				</letStatement>
			</statements>
			<symbol> } </symbol>
		</subroutineBody>
	</subroutineDec>
	<symbol> } </symbol>
</class>
