function MathTest.init 0
function MathTest.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push argument 0
neg
return
goto IF_END_0
label IF_END_0
push argument 0
return
function MathTest.multiply 5
push argument 0
push constant 0
eq
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push constant 0
return
goto IF_END_0
label IF_END_0
push argument 1
push constant 0
eq
if-goto IF_TRUE_1
goto IF_END_1
label IF_TRUE_1
push constant 0
return
goto IF_END_1
label IF_END_1
push constant 1
pop local 1
push argument 0
pop local 2
label WHILE_START_0
push local 3
push constant 16
lt
not
if-goto WHILE_END_0
push argument 1
push local 1
and
pop local 4
push local 4
push constant 0
eq
not
if-goto IF_TRUE_2
goto IF_END_2
label IF_TRUE_2
push local 0
push local 2
add
pop local 0
goto IF_END_2
label IF_END_2
push local 2
push local 2
add
pop local 2
push local 1
push local 1
add
pop local 1
push local 3
push constant 1
add
pop local 3
goto WHILE_START_0
label WHILE_END_0
push local 0
return
function MathTest.divide 3
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push local 2
push local 1
gt
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push constant 0
return
goto IF_END_0
label IF_END_0
push local 1
push constant 2
push local 2
call Math.multiply 2
call Math.divide 2
pop local 0
push local 1
push constant 2
push local 0
call Math.multiply 2
push local 2
call Math.multiply 2
sub
push local 2
lt
if-goto IF_TRUE_1
goto IF_FALSE_1
label IF_TRUE_1
push argument 0
push constant 0
lt
push argument 1
and
push constant 0
gt
push argument 0
push constant 0
gt
push argument 1
and
push constant 0
lt
or
if-goto IF_TRUE_2
goto IF_END_2
label IF_TRUE_2
push local 0
neg
pop local 0
goto IF_END_2
label IF_END_2
push constant 2
push local 0
call Math.multiply 2
return
goto IF_END_1
label IF_FALSE_1
push argument 0
push constant 0
lt
push argument 1
and
push constant 0
gt
push argument 0
push constant 0
gt
push argument 1
and
push constant 0
lt
or
if-goto IF_TRUE_3
goto IF_END_3
label IF_TRUE_3
push local 0
neg
pop local 0
goto IF_END_3
label IF_END_3
push constant 2
push local 0
call Math.multiply 2
push constant 1
add
return
label IF_END_1
function MathTest.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push argument 0
return
goto IF_END_0
label IF_END_0
push argument 1
return
function MathTest.max 0
push argument 0
push argument 1
lt
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push argument 1
return
goto IF_END_0
label IF_END_0
push argument 0
return
function MathTest.pow 2
push constant 1
pop local 0
label WHILE_START_0
push local 1
push argument 1
lt
not
if-goto WHILE_END_0
push local 0
push argument 0
call Math.multiply 2
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_START_0
label WHILE_END_0
push local 0
return
function MathTest.sqrt 3
push constant 16
push constant 2
call Math.divide 2
push constant 1
sub
pop local 1
label WHILE_START_0
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END_0
push local 0
push constant 2
push local 1
call MathTest.pow 2
add
push constant 2
call MathTest.pow 2
pop local 2
push local 2
push constant 0
gt
push local 2
push argument 0
push constant 1
add
lt
and
if-goto IF_TRUE_0
goto IF_END_0
label IF_TRUE_0
push local 0
push constant 2
push local 1
call MathTest.pow 2
add
pop local 0
goto IF_END_0
label IF_END_0
push local 1
push constant 1
sub
pop local 1
goto WHILE_START_0
label WHILE_END_0
push local 0
return
